{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Start Tutorial In this tutorial, we'll show you how to use Java Molecular Energy to calculate the potential energy of a molecule using the MMFF94 force field. Install Java Molecular Energy Before we can use Java Molecular Energy, we need to install it. Just add it as a dependency in you maven or gradle build system. <dependency> <groupId>io.github.ramimanaf</groupId> <artifactId>jme</artifactId> <version>1.0.0</version> </dependency> Load the Molecule Next, we'll load a molecule into our program. You can use CDK readers to import your molecule as AtomContainer : import org.openscience.cdk.ChemFile; import org.openscience.cdk.interfaces.IAtomContainer; import org.openscience.cdk.io.Mol2Reader; import org.openscience.cdk.tools.manipulator.ChemFileManipulator; ChemFileManipulator.getAllAtomContainers(new Mol2Reader(getClass().getResourceAsStream(\"molecule.mol2\")).read(new ChemFile())); IAtomContainer container = containers.get(0); Make sure that your molecule doesn't have implicit hydrogens and all it's atoms have 3D coordinates. If you still have them you can see the following page. Calculate The Potential Energy in MMFF94 Create a MMFF94 object and assign MMFF94 parameters to it. After that you can calculate the potential energy for your molecule: MMFF94 mmff94 = new MMFF94(false); mmff.assignParameters(container); System.out.println(\"Energy: \"+mmff.calculateEnergy(container)+\" kcal/mol\"); And that's it!","title":"Getting Started"},{"location":"#quick-start-tutorial","text":"In this tutorial, we'll show you how to use Java Molecular Energy to calculate the potential energy of a molecule using the MMFF94 force field.","title":"Quick Start Tutorial"},{"location":"#install-java-molecular-energy","text":"Before we can use Java Molecular Energy, we need to install it. Just add it as a dependency in you maven or gradle build system. <dependency> <groupId>io.github.ramimanaf</groupId> <artifactId>jme</artifactId> <version>1.0.0</version> </dependency>","title":"Install Java Molecular Energy"},{"location":"#load-the-molecule","text":"Next, we'll load a molecule into our program. You can use CDK readers to import your molecule as AtomContainer : import org.openscience.cdk.ChemFile; import org.openscience.cdk.interfaces.IAtomContainer; import org.openscience.cdk.io.Mol2Reader; import org.openscience.cdk.tools.manipulator.ChemFileManipulator; ChemFileManipulator.getAllAtomContainers(new Mol2Reader(getClass().getResourceAsStream(\"molecule.mol2\")).read(new ChemFile())); IAtomContainer container = containers.get(0); Make sure that your molecule doesn't have implicit hydrogens and all it's atoms have 3D coordinates. If you still have them you can see the following page.","title":"Load the Molecule"},{"location":"#calculate-the-potential-energy-in-mmff94","text":"Create a MMFF94 object and assign MMFF94 parameters to it. After that you can calculate the potential energy for your molecule: MMFF94 mmff94 = new MMFF94(false); mmff.assignParameters(container); System.out.println(\"Energy: \"+mmff.calculateEnergy(container)+\" kcal/mol\"); And that's it!","title":"Calculate The Potential Energy in MMFF94"},{"location":"calculate-energy-without-coordinates/","text":"Calculate Potential Energy without 3D Coordinates As you know, force fields depends on the 3D structure of the molecule for calculating potential energy. However, in some cases we don't have initial coordinates as we are importing from chemical formats that doesn't support encoding 3D coordinates such as SMILES or we are have converted implicit hydrogens to explicit ones. In that case you have to follow some steps to get an initial 3D coordinates for your molecule. We will demonstrate loading molecule from SMILES as the worst case. Load the molecule Load the molecule from SMILES using CDK: IAtomContainer container = new SmilesParser(SilentChemObjectBuilder.getInstance()).parseSmiles(\"CCCC\"); Assign Atom Types If your atoms are not propertly configured in CDK, then JME could give wrong results. This is true especially for assigning formal charges for nitrogens in your molecule. AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(container); Add Explicit Hydrogen After assigning atom types you can add implicit hydrogens based on atom types assigned. Then make sure to convert the implicit hydrogens to explicit ones. CDKHydrogenAdder.getInstance(SilentChemObjectBuilder.getInstance()).addImplicitHydrogens(container); AtomContainerManipulator.convertImplicitToExplicitHydrogens(container); Assign 3D Coordinates For The Molecule You can assign initial 3D Coordinates manually or use the CDK ModelBuilder3D to assign preferred atom positions based on your molecule. ModelBuilder3D.getInstance(TemplateHandler3D.getInstance(), \"mmff94\", SilentChemObjectBuilder.getInstance()).generate3DCoordinates(container, false); Finally you can calculate potential energy as normal.","title":"Calculate Potential Energy without 3D Coordinates"},{"location":"calculate-energy-without-coordinates/#calculate-potential-energy-without-3d-coordinates","text":"As you know, force fields depends on the 3D structure of the molecule for calculating potential energy. However, in some cases we don't have initial coordinates as we are importing from chemical formats that doesn't support encoding 3D coordinates such as SMILES or we are have converted implicit hydrogens to explicit ones. In that case you have to follow some steps to get an initial 3D coordinates for your molecule. We will demonstrate loading molecule from SMILES as the worst case.","title":"Calculate Potential Energy without 3D Coordinates"},{"location":"calculate-energy-without-coordinates/#load-the-molecule","text":"Load the molecule from SMILES using CDK: IAtomContainer container = new SmilesParser(SilentChemObjectBuilder.getInstance()).parseSmiles(\"CCCC\");","title":"Load the molecule"},{"location":"calculate-energy-without-coordinates/#assign-atom-types","text":"If your atoms are not propertly configured in CDK, then JME could give wrong results. This is true especially for assigning formal charges for nitrogens in your molecule. AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(container);","title":"Assign Atom Types"},{"location":"calculate-energy-without-coordinates/#add-explicit-hydrogen","text":"After assigning atom types you can add implicit hydrogens based on atom types assigned. Then make sure to convert the implicit hydrogens to explicit ones. CDKHydrogenAdder.getInstance(SilentChemObjectBuilder.getInstance()).addImplicitHydrogens(container); AtomContainerManipulator.convertImplicitToExplicitHydrogens(container);","title":"Add Explicit Hydrogen"},{"location":"calculate-energy-without-coordinates/#assign-3d-coordinates-for-the-molecule","text":"You can assign initial 3D Coordinates manually or use the CDK ModelBuilder3D to assign preferred atom positions based on your molecule. ModelBuilder3D.getInstance(TemplateHandler3D.getInstance(), \"mmff94\", SilentChemObjectBuilder.getInstance()).generate3DCoordinates(container, false); Finally you can calculate potential energy as normal.","title":"Assign 3D Coordinates For The Molecule"},{"location":"constraint/","text":"Constraints Constraints are locks that can prevent the molecule from violating certain conditions. These locks are useful in certain situations such as in energy minimization and simulaiton. The locks can be based on molecule confomration such as fixing two atoms at certain distance from each other or allowing a range of angle that a dihydral angle is permitted to be in. import org.jme.constraint.*; ... ConformationalConstraintFactory.constrainDistance(atom1, atom2, 1.4, 1.6);//locks the bond distance between 1.4 to 1.6 \u00c5 Constraints can be combined with boolean operators such as not, and, or which are provided as methods in the Constraints interface. Constraint constraint = bondConstraint.and(angleConstraint);","title":"Constraints"},{"location":"constraint/#constraints","text":"Constraints are locks that can prevent the molecule from violating certain conditions. These locks are useful in certain situations such as in energy minimization and simulaiton. The locks can be based on molecule confomration such as fixing two atoms at certain distance from each other or allowing a range of angle that a dihydral angle is permitted to be in. import org.jme.constraint.*; ... ConformationalConstraintFactory.constrainDistance(atom1, atom2, 1.4, 1.6);//locks the bond distance between 1.4 to 1.6 \u00c5 Constraints can be combined with boolean operators such as not, and, or which are provided as methods in the Constraints interface. Constraint constraint = bondConstraint.and(angleConstraint);","title":"Constraints"},{"location":"energy-minimization/","text":"Energy Minimization Previously we saw how to calculate the potential energy for a molecule using Java Molecular Energy. This showed how the molecule conformation can affect the potential energy. An important application for calculating potential energy for the molecule is minimizing it to obtain the most stable and favorable structure for the molecule. Here we will show you how to energy minimize a molecule using Java Molecular Energy. Create a Minimizer For The Molecule The energy minimizer use the force field to calculate the energy and try to change the molecule structure to minimize it. We have different choices for choosing energy minimization algorithm. We will use GradientDescent as the most popular method. MMFF94 mmff = new MMFF94(true); GradientDescent minimizer = new GradientDescent(mmff); Assign Force Field Parameters To The Molecule This step is required as the minimizer will keep calculating the energy of the molecule. mmff.assignParameters(container); Minimize The Energy For The Molecule When calling minimize method the minimizer will block the thread untlin the process finishes. The process is an iterative cycle with each cycle called a step. The minimizer will recieve the maximum steps at wich it will stop after them. Each step the minimizer will try to change the conformation of the molecule depending on the step size. The larger the step the faster the molecule will move to the energy minimum. However, small steps help the minimizer reach the smallest possible energy but with more steps. In this example we called the minimizer to do minimization for 1000 step with 0.1 step size. The final parameter is the threshold. This parameter determins the energy difference that when reached between two steps the minimizer will stop. E.g.: here if the last step minimized the energy by 10kcal, the minimizer will stop. minimizer.minimize(container, 1000, .1f, 10);","title":"Energy Minimization"},{"location":"energy-minimization/#energy-minimization","text":"Previously we saw how to calculate the potential energy for a molecule using Java Molecular Energy. This showed how the molecule conformation can affect the potential energy. An important application for calculating potential energy for the molecule is minimizing it to obtain the most stable and favorable structure for the molecule. Here we will show you how to energy minimize a molecule using Java Molecular Energy.","title":"Energy Minimization"},{"location":"energy-minimization/#create-a-minimizer-for-the-molecule","text":"The energy minimizer use the force field to calculate the energy and try to change the molecule structure to minimize it. We have different choices for choosing energy minimization algorithm. We will use GradientDescent as the most popular method. MMFF94 mmff = new MMFF94(true); GradientDescent minimizer = new GradientDescent(mmff);","title":"Create a Minimizer For The Molecule"},{"location":"energy-minimization/#assign-force-field-parameters-to-the-molecule","text":"This step is required as the minimizer will keep calculating the energy of the molecule. mmff.assignParameters(container);","title":"Assign Force Field Parameters To The Molecule"},{"location":"energy-minimization/#minimize-the-energy-for-the-molecule","text":"When calling minimize method the minimizer will block the thread untlin the process finishes. The process is an iterative cycle with each cycle called a step. The minimizer will recieve the maximum steps at wich it will stop after them. Each step the minimizer will try to change the conformation of the molecule depending on the step size. The larger the step the faster the molecule will move to the energy minimum. However, small steps help the minimizer reach the smallest possible energy but with more steps. In this example we called the minimizer to do minimization for 1000 step with 0.1 step size. The final parameter is the threshold. This parameter determins the energy difference that when reached between two steps the minimizer will stop. E.g.: here if the last step minimized the energy by 10kcal, the minimizer will stop. minimizer.minimize(container, 1000, .1f, 10);","title":"Minimize The Energy For The Molecule"},{"location":"forcefield/","text":"Force Field A force field is an algorithm that is used to calculate potential energy for the modeled compounds. In JMolecular Energy the force field is represented with ForceField abstract class where all the force fields should extend this class. The class offer methods that is intended to contain certain functionalities. Assigning Parameters Empirical force fields most of the time assign parameters to the molecule based on the functional groups and atoms it has. This will facilitate calculating the potential energy for the molecule in the next step. Assigning parameters can be done using this method mmff.assignParameters(atomContainer); Energy Component Each ForceField contains one or more of the EnergyComponent . These components are intended to address different energy terms such as bond stretching, angle bending and intermolecular interactions. Each one contribute to the total potential energy of the system by certain energy. The class ForceField sums up this energy in the double calculateEnergy(IAtomContainer) method and return it as a double . You can access the energy components in a certain force field using the method List<EnergyComponent> getEnergyComponents() which returns a list of energy component. The ForceField class is flexible and you can add or remove EnergyComponent using the method addEnergyComponent(EnergyComponent) and removeEnergyComponent(EnergyComponent) . This allows for example to convert a force field into inter- or intra-molecular interactions only which is very helpful when using the force field in a docking or 3D QSAR algorithm. Energy components can be used alone to calculate the potential energy term alone as they have their double calculateEnergy(IAtomContainer) method. The implementations also have methods to calculate energy for a certain pair of atoms for example. Energy Unit The ForceField use the kcal/mol unit by defualt. In case you want to calculate the energy in different unit you can use the setEnergyUnit(EnergyUnit) method for changing the unit. For example: forcefield.setEnergyUnit(EnergyUnit.KJ_PER_MOL);//for kilojoules/mol Cutoff Distance In some force fields it is possible to specify a cutoff distance that defines the distance in angstrom which beyond it any non-bonded interaction will be disregarded. Using this functionality is very helpful in case of large systems where the number of intermolecular interaction is very high. The energy beyond certain distance is very small and have no significant amount and therefore can be disregarded. forcefield.setCutoffDistance(12);//sets the cutoff distance to 12 \u00c5 Dielectric Constant Some force fields also has the dielectric constant functionality. This option enable us to simulate the effect of certain solvents on the degree of intermolecular interaction without the need the having the solvent molecules being modeled explicitly. The solvent is represented as a continuous media rather than individual molecules. You can modify the dielectric constant using setDielectricConstant(double) method.","title":"Force Field"},{"location":"forcefield/#force-field","text":"A force field is an algorithm that is used to calculate potential energy for the modeled compounds. In JMolecular Energy the force field is represented with ForceField abstract class where all the force fields should extend this class. The class offer methods that is intended to contain certain functionalities.","title":"Force Field"},{"location":"forcefield/#assigning-parameters","text":"Empirical force fields most of the time assign parameters to the molecule based on the functional groups and atoms it has. This will facilitate calculating the potential energy for the molecule in the next step. Assigning parameters can be done using this method mmff.assignParameters(atomContainer);","title":"Assigning Parameters"},{"location":"forcefield/#energy-component","text":"Each ForceField contains one or more of the EnergyComponent . These components are intended to address different energy terms such as bond stretching, angle bending and intermolecular interactions. Each one contribute to the total potential energy of the system by certain energy. The class ForceField sums up this energy in the double calculateEnergy(IAtomContainer) method and return it as a double . You can access the energy components in a certain force field using the method List<EnergyComponent> getEnergyComponents() which returns a list of energy component. The ForceField class is flexible and you can add or remove EnergyComponent using the method addEnergyComponent(EnergyComponent) and removeEnergyComponent(EnergyComponent) . This allows for example to convert a force field into inter- or intra-molecular interactions only which is very helpful when using the force field in a docking or 3D QSAR algorithm. Energy components can be used alone to calculate the potential energy term alone as they have their double calculateEnergy(IAtomContainer) method. The implementations also have methods to calculate energy for a certain pair of atoms for example.","title":"Energy Component"},{"location":"forcefield/#energy-unit","text":"The ForceField use the kcal/mol unit by defualt. In case you want to calculate the energy in different unit you can use the setEnergyUnit(EnergyUnit) method for changing the unit. For example: forcefield.setEnergyUnit(EnergyUnit.KJ_PER_MOL);//for kilojoules/mol","title":"Energy Unit"},{"location":"forcefield/#cutoff-distance","text":"In some force fields it is possible to specify a cutoff distance that defines the distance in angstrom which beyond it any non-bonded interaction will be disregarded. Using this functionality is very helpful in case of large systems where the number of intermolecular interaction is very high. The energy beyond certain distance is very small and have no significant amount and therefore can be disregarded. forcefield.setCutoffDistance(12);//sets the cutoff distance to 12 \u00c5","title":"Cutoff Distance"},{"location":"forcefield/#dielectric-constant","text":"Some force fields also has the dielectric constant functionality. This option enable us to simulate the effect of certain solvents on the degree of intermolecular interaction without the need the having the solvent molecules being modeled explicitly. The solvent is represented as a continuous media rather than individual molecules. You can modify the dielectric constant using setDielectricConstant(double) method.","title":"Dielectric Constant"},{"location":"mmff94/","text":"MMFF94 Force Field MMFF94 is an empirical force field that is optimized for calculating potential energy of organic molecules. The force fields have two subdivisions MMFF94 & MMFF94s (stands for static). MMFF94 is the first one that is intended for simulation while MMFF94s is optimized for energy minimization. You can choose which one through the constructor boolean parameter of the force field. Use true for MMFF94s and false for MMFF94. import org.jme.forcefield.mmff.MMFF94; ... MMFF94 mmff94 = new MMFF94(false); MMFF94 Energy Terms The force field use several terms to calculate potential energy of the molecule. The forces are divided to bonded and non-bonded interactions: Bonded Interactions: Bond Stretching: for calculating energy based on the distance between two bonded atoms. Angle Bending: the angle between three bonded atoms. Stretch Bend Interaction: A force that increase the bonds when the angle between three bonded atoms decrease. This is used to correct the structure of the molecule. Torsion: This term forces angle formed between four bonded atoms to be at certain angle. This angle is also called dihydral angle. Out Of Plane: This term is used to describe the effect of the angle formed when three atoms at least connect to a central atom. Two end atoms and the central atom can form a plane which the third end atom is out of it by certain angle. This term is used usually to correct the Sp2 hybridized central atom planarity. Non-bonded Interactions: Van Der Waals: Calculate the van der waals force between two non-bonded atoms. Electrostatic Interaction: This term calculates electrostatic interaction energy between atoms. Note that not only atoms with formal charges are included as MMFF94 assign partial charges for unionized atoms. Implementation MMFF94 instance when first created loads all the force fields parameters needed. Before calculating energy to any molecule you have to assign parameters to this molecule first. This process prevent MMFF94 from searching for proper paramters for the molecule each time you want to calculate the energy. mmff.assignParameters(atomContainer); The partial charges are assigned to the molecule and you can retrive them using the following code: java atomContainer.getAtom(0).getCharge(); For more informations about MMFF94 implementation you can see the original papers: Merck molecular force field. I. Basis, form, scope, parameterization, and performance of MMFF94 Merck molecular force field. II. MMFF94 van der Waals and electrostatic parameters for intermolecular interactions Merck molecular force field. III. Molecular geometries and vibrational frequencies for MMFF94. Merck molecular force field. IV. conformational energies and geometries for MMFF94 Merck molecular force field. V. Extension of MMFF94 using experimental data, additional computational data, and empirical rules MMFF VI. MMFF94s option for energy minimization studies MMFF VII. Characterization of MMFF94, MMFF94s, and other widely available force fields for conformational energies and for intermolecular-interaction energies and geometries","title":"MMFF94 Force Field"},{"location":"mmff94/#mmff94-force-field","text":"MMFF94 is an empirical force field that is optimized for calculating potential energy of organic molecules. The force fields have two subdivisions MMFF94 & MMFF94s (stands for static). MMFF94 is the first one that is intended for simulation while MMFF94s is optimized for energy minimization. You can choose which one through the constructor boolean parameter of the force field. Use true for MMFF94s and false for MMFF94. import org.jme.forcefield.mmff.MMFF94; ... MMFF94 mmff94 = new MMFF94(false);","title":"MMFF94 Force Field"},{"location":"mmff94/#mmff94-energy-terms","text":"The force field use several terms to calculate potential energy of the molecule. The forces are divided to bonded and non-bonded interactions: Bonded Interactions: Bond Stretching: for calculating energy based on the distance between two bonded atoms. Angle Bending: the angle between three bonded atoms. Stretch Bend Interaction: A force that increase the bonds when the angle between three bonded atoms decrease. This is used to correct the structure of the molecule. Torsion: This term forces angle formed between four bonded atoms to be at certain angle. This angle is also called dihydral angle. Out Of Plane: This term is used to describe the effect of the angle formed when three atoms at least connect to a central atom. Two end atoms and the central atom can form a plane which the third end atom is out of it by certain angle. This term is used usually to correct the Sp2 hybridized central atom planarity. Non-bonded Interactions: Van Der Waals: Calculate the van der waals force between two non-bonded atoms. Electrostatic Interaction: This term calculates electrostatic interaction energy between atoms. Note that not only atoms with formal charges are included as MMFF94 assign partial charges for unionized atoms.","title":"MMFF94 Energy Terms"},{"location":"mmff94/#implementation","text":"MMFF94 instance when first created loads all the force fields parameters needed. Before calculating energy to any molecule you have to assign parameters to this molecule first. This process prevent MMFF94 from searching for proper paramters for the molecule each time you want to calculate the energy. mmff.assignParameters(atomContainer); The partial charges are assigned to the molecule and you can retrive them using the following code: java atomContainer.getAtom(0).getCharge(); For more informations about MMFF94 implementation you can see the original papers: Merck molecular force field. I. Basis, form, scope, parameterization, and performance of MMFF94 Merck molecular force field. II. MMFF94 van der Waals and electrostatic parameters for intermolecular interactions Merck molecular force field. III. Molecular geometries and vibrational frequencies for MMFF94. Merck molecular force field. IV. conformational energies and geometries for MMFF94 Merck molecular force field. V. Extension of MMFF94 using experimental data, additional computational data, and empirical rules MMFF VI. MMFF94s option for energy minimization studies MMFF VII. Characterization of MMFF94, MMFF94s, and other widely available force fields for conformational energies and for intermolecular-interaction energies and geometries","title":"Implementation"}]}